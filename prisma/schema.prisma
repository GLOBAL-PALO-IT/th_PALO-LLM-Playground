// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// Data pipeline - Documents
model DocumentPipeline {
  id        String   @id @default(uuid())
  fileName  String
  content   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  metadata  Json?

  TranslationPipeline TranslationPipeline[]

  EnrichmentPipeline EnrichmentPipeline[]

  EvaluationPipeline EvaluationPipeline[]
}

// Data pipeline - Translation Pipeline
model TranslationPipeline {
  id        String   @id @default(uuid())
  docId     String
  fileName  String
  page      Int?
  input     String
  output    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  metadata  Json?

  document DocumentPipeline @relation(fields: [docId], references: [id])
}

// Data pipeline - Enrichment Pipeline
model EnrichmentPipeline {
  id        String   @id @default(uuid())
  docId     String
  fileName  String
  page      Int?
  input     String
  output    Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  metadata  Json?

  document DocumentPipeline @relation(fields: [docId], references: [id])
}

// Data pipeline - Evaluation Pipeline
model EvaluationPipeline {
  id        String   @id @default(uuid())
  docId     String
  fileName  String
  page      Int?
  input     String
  output    String
  question  String?  
  grounded_context String?
  grounded_answer  String?
  llm_answer    String?
  llm_score     Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  metadata  Json?

  document DocumentPipeline @relation(fields: [docId], references: [id])
}

// Client model
model Client {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  policies Policy[] // One-to-many relationship with Policy
  claims   Claim[] // One-to-many relationship with Claim
  payments Payment[] // One-to-many relationship with Payment
}

// Policy model
model Policy {
  id             String   @id @default(uuid())
  policyNumber   String   @unique
  clientId       String
  startDate      DateTime
  endDate        DateTime
  coverageAmount Float
  premium        Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  client   Client    @relation(fields: [clientId], references: [id])
  claims   Claim[] // One-to-many relationship with Claim
  payments Payment[] // One-to-many relationship with Payment
}

// Claim model
model Claim {
  id            String   @id @default(uuid())
  claimNumber   String   @unique
  policyId      String
  clientId      String
  dateOfClaim   DateTime
  amountClaimed Float
  status        String
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  policy Policy @relation(fields: [policyId], references: [id])
  client Client @relation(fields: [clientId], references: [id])
}

// Payment model
model Payment {
  id            String   @id @default(uuid())
  paymentNumber String   @unique
  clientId      String
  policyId      String
  amount        Float
  dateOfPayment DateTime
  method        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  client Client @relation(fields: [clientId], references: [id])
  policy Policy @relation(fields: [policyId], references: [id])
}
